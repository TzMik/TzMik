<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mikel Cantero</title>
    <link>http://example.org/</link>
    <description>Recent content on Mikel Cantero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Thu, 15 Jun 2023 16:02:31 -0600</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>12 rasgos del estoicismo</title>
      <link>http://example.org/posts/12-rasgos-del-estoicismo/</link>
      <pubDate>Thu, 15 Jun 2023 16:02:31 -0600</pubDate>
      
      <guid>http://example.org/posts/12-rasgos-del-estoicismo/</guid>
      <description>Durante mucho tiempo estuve leyendo y escuchando sobre el &amp;ldquo;estoicismo&amp;rdquo; en diversos lugares, y finalmente, durante mi visita a España, tuve la suerte de encontrar un libro que captó mi atención de inmediato: &amp;ldquo;Cómo ser un estoico&amp;rdquo; de Massimo Pigliucci. Su lectura resultó ser muy entretenida y me permitió reencontrarme con la filosofía, una asignatura que solía disfrutar mucho durante mis días en el instituto.
Del libro, adquirí varias enseñanzas valiosas que deseo compartir aquí, para poder referirme a ellas en el futuro y extraer las mejores lecciones de este movimiento filosófico.</description>
    </item>
    
    <item>
      <title>Los códigos de estado HTTP más importantes que debes conocer</title>
      <link>http://example.org/posts/los-codigos-de-estado-http-mas-importantes-que-debes-conocer/</link>
      <pubDate>Sat, 15 Apr 2023 12:33:58 -0600</pubDate>
      
      <guid>http://example.org/posts/los-codigos-de-estado-http-mas-importantes-que-debes-conocer/</guid>
      <description>Los códigos de estado HTTP son una forma de comunicación entre el servidor y el cliente en una solicitud HTTP. Estos códigos son una forma de indicar el resultado de la solicitud y proporcionan información útil para el cliente y el servidor. Aquí están los códigos de estado HTTP más importantes que todo desarrollador web debería conocer.
1xx - Respuestas informativas  Link to heading   Los códigos de estado en la serie 1xx son respuestas informativas, lo que significa que el servidor está respondiendo a una solicitud preliminar del cliente y que aún no ha comenzado a procesar la solicitud.</description>
    </item>
    
    <item>
      <title>Utiliza Postman para crear API RESTs</title>
      <link>http://example.org/posts/postman/</link>
      <pubDate>Sat, 15 Apr 2023 12:30:10 -0600</pubDate>
      
      <guid>http://example.org/posts/postman/</guid>
      <description>Postman es una herramienta de colaboración para el desarrollo de API (Interfaz de Programación de Aplicaciones) que permite a los desarrolladores probar, documentar y compartir las API de sus aplicaciones de una manera sencilla y eficiente.
Postman funciona como una herramienta de cliente HTTP que permite enviar solicitudes HTTP (GET, POST, PUT, DELETE, etc.) a una API específica y recibir respuestas en formato JSON o XML. La herramienta proporciona una interfaz gráfica de usuario (GUI) que permite a los usuarios escribir y enviar solicitudes HTTP sin tener que escribir código manualmente.</description>
    </item>
    
    <item>
      <title>¿Qué son las CLI?</title>
      <link>http://example.org/posts/que-son-las-cli/</link>
      <pubDate>Sat, 15 Apr 2023 12:25:17 -0600</pubDate>
      
      <guid>http://example.org/posts/que-son-las-cli/</guid>
      <description>CLI son las siglas en inglés de &amp;ldquo;Command Line Interface&amp;rdquo; o Interfaz de Línea de Comandos en español. Se trata de una forma de interactuar con un ordenador o sistema operativo utilizando comandos escritos en texto plano, en lugar de hacer clic en iconos o utilizar una interfaz gráfica de usuario (GUI).
Un CLI generalmente se presenta en una ventana de terminal o consola, donde el usuario escribe comandos específicos para realizar tareas en el sistema operativo.</description>
    </item>
    
    <item>
      <title>¿Qué son los SDK?</title>
      <link>http://example.org/posts/que-son-los-sdk/</link>
      <pubDate>Sat, 15 Apr 2023 12:22:00 -0600</pubDate>
      
      <guid>http://example.org/posts/que-son-los-sdk/</guid>
      <description>SDK son las siglas en inglés de &amp;ldquo;Software Development Kit&amp;rdquo; o en español &amp;ldquo;Kit de desarrollo de software&amp;rdquo;. Se trata de un conjunto de herramientas, librerías, documentación y ejemplos que permiten a los desarrolladores crear aplicaciones para una plataforma o sistema operativo específico.
En términos simples, un SDK es una especie de &amp;ldquo;caja de herramientas&amp;rdquo; que los desarrolladores pueden utilizar para construir aplicaciones de manera más rápida y eficiente. Un SDK generalmente incluye herramientas de programación, bibliotecas de código, archivos de configuración y documentación.</description>
    </item>
    
    <item>
      <title>¿Qué son las APIs?</title>
      <link>http://example.org/posts/que-son-las-apis/</link>
      <pubDate>Sat, 15 Apr 2023 12:08:53 -0600</pubDate>
      
      <guid>http://example.org/posts/que-son-las-apis/</guid>
      <description>Las APIs, o Interfaces de Programación de Aplicaciones, son herramientas esenciales para la creación y el consumo de servicios web en la actualidad. En este artículo, explicaremos qué son las APIs, para qué sirven y cuáles son sus principales ventajas.
¿Qué son las APIs?  Link to heading   En términos simples, una API es un conjunto de reglas, protocolos y herramientas que permiten a diferentes sistemas comunicarse entre sí.</description>
    </item>
    
    <item>
      <title>¿Qué son las clases anónimas?</title>
      <link>http://example.org/posts/que-son-las-clases-an%C3%B3nimas/</link>
      <pubDate>Fri, 07 Apr 2023 16:08:53 -0600</pubDate>
      
      <guid>http://example.org/posts/que-son-las-clases-an%C3%B3nimas/</guid>
      <description>Una clase anónima es una clase que se define de forma anónima, es decir, sin un nombre explícito. En PHP, las clases anónimas se crean utilizando la palabra clave new seguida de la definición de la clase entre paréntesis. La definición de la clase puede incluir propiedades, métodos y otros elementos de la POO.
Las clases anónimas se utilizan principalmente para crear objetos de forma rápida y sencilla, sin necesidad de definir una clase completa.</description>
    </item>
    
    <item>
      <title>¿Para qué sirven los namespaces en PHP?</title>
      <link>http://example.org/posts/namespaces-en-php/</link>
      <pubDate>Fri, 07 Apr 2023 15:08:53 -0600</pubDate>
      
      <guid>http://example.org/posts/namespaces-en-php/</guid>
      <description>Los namespaces son una funcionalidad introducida en PHP 5.3 para ayudar a los desarrolladores a organizar y estructurar sus aplicaciones. Los namespaces permiten definir un espacio de nombres (namespace) para un conjunto de clases, funciones y constantes, lo que ayuda a evitar conflictos de nombres y permite una mejor organización y mantenimiento del código.
En PHP, los namespaces se definen mediante la palabra clave namespace, seguida del nombre del espacio de nombres y su definición.</description>
    </item>
    
    <item>
      <title>Diferencias entre clases abstractas y traits</title>
      <link>http://example.org/posts/diferencias-entre-clases-abstractas-y-traits/</link>
      <pubDate>Fri, 07 Apr 2023 14:08:53 -0600</pubDate>
      
      <guid>http://example.org/posts/diferencias-entre-clases-abstractas-y-traits/</guid>
      <description>Tanto una clase abstracta como un trait son formas de reutilizar código en la programación orientada a objetos, pero hay algunas diferencias importantes entre ellos.
Una clase abstracta es una clase que no se puede instanciar directamente, sino que se utiliza como una plantilla para crear otras clases que heredan de ella. Las clases abstractas pueden contener métodos abstractos (sin implementación) y métodos concretos (con implementación), así como propiedades, constantes y cualquier otra definición de clase.</description>
    </item>
    
    <item>
      <title>¿Qué son los traits en la POO?</title>
      <link>http://example.org/posts/traits-en-la-poo/</link>
      <pubDate>Fri, 07 Apr 2023 13:08:53 -0600</pubDate>
      
      <guid>http://example.org/posts/traits-en-la-poo/</guid>
      <description>En la programación orientada a objetos, un trait es una forma de reutilizar código que permite definir un conjunto de métodos que pueden ser utilizados por varias clases diferentes. Un trait se define como una colección de métodos que se pueden incluir en una o varias clases, lo que permite compartir funcionalidades comunes entre ellas.
Al igual que las interfaces, los traits son una característica introducida en PHP para mejorar la reutilización de código y reducir la complejidad del código.</description>
    </item>
    
    <item>
      <title>¿Qué son las interfaces en la POO?</title>
      <link>http://example.org/posts/interfaces-en-la-poo/</link>
      <pubDate>Fri, 07 Apr 2023 12:08:53 -0600</pubDate>
      
      <guid>http://example.org/posts/interfaces-en-la-poo/</guid>
      <description>Introducción  Link to heading   Las interfaces son una parte esencial de la programación orientada a objetos (POO). Una interfaz es un conjunto de métodos abstractos que una clase debe implementar para cumplir con un contrato determinado. En este artículo, explicaremos en detalle qué son las interfaces, sus ventajas y desventajas y un ejemplo con PHP.
¿Qué son las interfaces?  Link to heading   En POO, una interfaz es un conjunto de métodos abstractos que define un contrato que las clases que implementan dicha interfaz deben cumplir.</description>
    </item>
    
    <item>
      <title>La abstracción en la POO</title>
      <link>http://example.org/posts/abstraccion-en-la-poo/</link>
      <pubDate>Fri, 31 Mar 2023 12:08:53 -0600</pubDate>
      
      <guid>http://example.org/posts/abstraccion-en-la-poo/</guid>
      <description>La abstracción es uno de los conceptos fundamentales de la programación orientada a objetos (POO). En términos simples, la abstracción es la capacidad de centrarse en los aspectos esenciales de un objeto o concepto y eliminar los detalles innecesarios o irrelevantes. La abstracción permite a los programadores diseñar sistemas complejos de manera más efectiva, simplificando la complejidad y promoviendo la modularidad y la reutilización de código.
Ventajas y desventajas  Link to heading   La abstracción tiene varias ventajas en la POO:</description>
    </item>
    
    <item>
      <title>La herencia en la Programación Orientada a Objetos</title>
      <link>http://example.org/posts/herencia-en-la-poo/</link>
      <pubDate>Fri, 31 Mar 2023 11:48:53 -0600</pubDate>
      
      <guid>http://example.org/posts/herencia-en-la-poo/</guid>
      <description>La herencia es un concepto fundamental en la programación orientada a objetos. En este post, exploraremos las ventajas y desventajas de la herencia en PHP, las diferencias entre las variables públicas, privadas y protegidas, la sobreescritura de métodos y variables en una clase hija, y los métodos y clases de tipo final.
Introducción  Link to heading   La herencia es uno de los conceptos fundamentales de la programación orientada a objetos.</description>
    </item>
    
    <item>
      <title>Serializar y deserializar objetos</title>
      <link>http://example.org/posts/serializar-deserialiar-objetos/</link>
      <pubDate>Fri, 31 Mar 2023 11:23:00 -0600</pubDate>
      
      <guid>http://example.org/posts/serializar-deserialiar-objetos/</guid>
      <description>Serialización es el proceso de convertir un objeto en una cadena de bytes que puede ser almacenada o transmitida a través de una red. La serialización permite que un objeto complejo se convierta en una forma que pueda ser almacenada o transmitida, y luego se pueda reconstruir en su forma original más tarde. En PHP, la serialización se realiza utilizando la función serialize(), que toma un objeto y devuelve una cadena de caracteres que representa el objeto serializado.</description>
    </item>
    
    <item>
      <title>Magic Methods de PHP</title>
      <link>http://example.org/posts/magic-methods-de-php/</link>
      <pubDate>Fri, 31 Mar 2023 10:45:34 -0600</pubDate>
      
      <guid>http://example.org/posts/magic-methods-de-php/</guid>
      <description>En PHP, existen varios métodos especiales llamados magic methods que permiten a los desarrolladores personalizar el comportamiento de las clases y objetos. Estos métodos se llaman automáticamente en ciertas situaciones específicas, como cuando se accede a una propiedad inexistente, se llama a un método inexistente, o se convierte un objeto en una cadena de texto, entre otras.
A continuación, se explicará cada uno de estos métodos especiales de PHP, junto con ejemplos que muestran cómo se pueden utilizar.</description>
    </item>
    
    <item>
      <title>Recordando conceptos de la POO</title>
      <link>http://example.org/posts/recordando-conceptos-de-la-poo/</link>
      <pubDate>Thu, 30 Mar 2023 17:24:01 -0600</pubDate>
      
      <guid>http://example.org/posts/recordando-conceptos-de-la-poo/</guid>
      <description>La programación orientada a objetos (POO) es un paradigma de programación que se centra en el uso de objetos para representar entidades del mundo real y sus interacciones. En POO, los objetos son instancias de una clase, que es una plantilla que define las propiedades y comportamientos del objeto. En este contexto, existen algunos términos importantes que se utilizan con frecuencia y que me gustaría recordar, como el constructor, destructor, static y constantes.</description>
    </item>
    
    <item>
      <title>Como ejecutar un comando en segundo plano en un servidor Ubuntu</title>
      <link>http://example.org/posts/como-ejecutar-comandos-en-segundo-plano-en-ubuntu/</link>
      <pubDate>Mon, 27 Mar 2023 17:20:00 -0600</pubDate>
      
      <guid>http://example.org/posts/como-ejecutar-comandos-en-segundo-plano-en-ubuntu/</guid>
      <description>Si deseas ejecutar un script en segundo plano en un servidor de forma que se siga ejecutando después de que te desconectes, puedes utilizar el comando nohup y redirigir la salida estándar y de error a un archivo.
Además, para asegurarte de que el proceso se siga ejecutando después de que te desconectes del servidor, puedes usar el comando disown. Esto separa el proceso del shell que lo inició y lo hace independiente de la sesión del usuario.</description>
    </item>
    
    <item>
      <title>Sobre mí</title>
      <link>http://example.org/about/</link>
      <pubDate>Sat, 25 Mar 2023 11:10:35 -0600</pubDate>
      
      <guid>http://example.org/about/</guid>
      <description>¡Hola! Soy Mikel Cantero, un ingeniero de software con más de 4 años de experiencia en el desarrollo web. He trabajado en proyectos tanto pequeños como grandes, en los cuales he usado distintos lenguajes de programación PHP, JavaScript, Python, Bash entre otros. Sin embargo, PHP y JavaScript son en los que me siento más cómodo.
También tengo conocimientos en distintas herramientas y tecnologías tales como: HTML, CSS, Sphinx Search Engine, Google Cloud, Administración de servidores, Bases de datos relacionales (especialmente MySQL y MariaDB), Web Scraping, Progresive Web App, AMP y demás.</description>
    </item>
    
    <item>
      <title>Ventajas de la Programación Orientada a Objetos</title>
      <link>http://example.org/posts/ventajas-de-la-programacion-orientada-a-objetos/</link>
      <pubDate>Fri, 24 Mar 2023 15:31:09 -0600</pubDate>
      
      <guid>http://example.org/posts/ventajas-de-la-programacion-orientada-a-objetos/</guid>
      <description>En la actualidad la Programación Orientada a Objetos se ha vuelto una especie de estandar en la industria. En este post veremos brevemente las principales 4 razones detrás de esto:
La encapsulación  Link to heading   La encapsulación es uno de los cuatro conceptos fundamentales de la programación orientada a objetos (POO). Se refiere a la técnica de ocultar la complejidad interna de un objeto, permitiendo que sólo se acceda a él a través de una interfaz pública, que está formada por los métodos y propiedades que el objeto expone para su uso por parte de otros objetos.</description>
    </item>
    
  </channel>
</rss>
