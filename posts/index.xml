<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mikel Cantero</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on Mikel Cantero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Mon, 27 Mar 2023 17:20:00 -0600</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Como ejecutar un comando en segundo plano en un servidor Ubuntu</title>
      <link>http://example.org/posts/como-ejecutar-comandos-en-segundo-plano-en-ubuntu/</link>
      <pubDate>Mon, 27 Mar 2023 17:20:00 -0600</pubDate>
      
      <guid>http://example.org/posts/como-ejecutar-comandos-en-segundo-plano-en-ubuntu/</guid>
      <description>Si deseas ejecutar un script en segundo plano en un servidor de forma que se siga ejecutando después de que te desconectes, puedes utilizar el comando nohup y redirigir la salida estándar y de error a un archivo.
Además, para asegurarte de que el proceso se siga ejecutando después de que te desconectes del servidor, puedes usar el comando disown. Esto separa el proceso del shell que lo inició y lo hace independiente de la sesión del usuario.</description>
    </item>
    
    <item>
      <title>Ventajas de la Programación Orientada a Objetos</title>
      <link>http://example.org/posts/ventajas-de-la-programacion-orientada-a-objetos/</link>
      <pubDate>Fri, 24 Mar 2023 15:31:09 -0600</pubDate>
      
      <guid>http://example.org/posts/ventajas-de-la-programacion-orientada-a-objetos/</guid>
      <description>En la actualidad la Programación Orientada a Objetos se ha vuelto una especie de estandar en la industria. En este post veremos brevemente las principales 4 razones detrás de esto:
La encapsulación  Link to heading   La encapsulación es uno de los cuatro conceptos fundamentales de la programación orientada a objetos (POO). Se refiere a la técnica de ocultar la complejidad interna de un objeto, permitiendo que sólo se acceda a él a través de una interfaz pública, que está formada por los métodos y propiedades que el objeto expone para su uso por parte de otros objetos.</description>
    </item>
    
  </channel>
</rss>
