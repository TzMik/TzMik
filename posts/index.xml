<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mikel Cantero</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on Mikel Cantero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Fri, 07 Apr 2023 13:08:53 -0600</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>¿Qué son los traits en la POO?</title>
      <link>http://example.org/posts/traits-en-la-poo/</link>
      <pubDate>Fri, 07 Apr 2023 13:08:53 -0600</pubDate>
      
      <guid>http://example.org/posts/traits-en-la-poo/</guid>
      <description>En la programación orientada a objetos, un trait es una forma de reutilizar código que permite definir un conjunto de métodos que pueden ser utilizados por varias clases diferentes. Un trait se define como una colección de métodos que se pueden incluir en una o varias clases, lo que permite compartir funcionalidades comunes entre ellas.
Al igual que las interfaces, los traits son una característica introducida en PHP para mejorar la reutilización de código y reducir la complejidad del código.</description>
    </item>
    
    <item>
      <title>¿Qué son las interfaces en la POO?</title>
      <link>http://example.org/posts/interfaces-en-la-poo/</link>
      <pubDate>Fri, 07 Apr 2023 12:08:53 -0600</pubDate>
      
      <guid>http://example.org/posts/interfaces-en-la-poo/</guid>
      <description>Introducción Link to heading Las interfaces son una parte esencial de la programación orientada a objetos (POO). Una interfaz es un conjunto de métodos abstractos que una clase debe implementar para cumplir con un contrato determinado. En este artículo, explicaremos en detalle qué son las interfaces, sus ventajas y desventajas y un ejemplo con PHP.
¿Qué son las interfaces? Link to heading En POO, una interfaz es un conjunto de métodos abstractos que define un contrato que las clases que implementan dicha interfaz deben cumplir.</description>
    </item>
    
    <item>
      <title>La abstracción en la POO</title>
      <link>http://example.org/posts/abstraccion-en-la-poo/</link>
      <pubDate>Fri, 31 Mar 2023 12:08:53 -0600</pubDate>
      
      <guid>http://example.org/posts/abstraccion-en-la-poo/</guid>
      <description>La abstracción es uno de los conceptos fundamentales de la programación orientada a objetos (POO). En términos simples, la abstracción es la capacidad de centrarse en los aspectos esenciales de un objeto o concepto y eliminar los detalles innecesarios o irrelevantes. La abstracción permite a los programadores diseñar sistemas complejos de manera más efectiva, simplificando la complejidad y promoviendo la modularidad y la reutilización de código.
Ventajas y desventajas Link to heading La abstracción tiene varias ventajas en la POO:</description>
    </item>
    
    <item>
      <title>La herencia en la Programación Orientada a Objetos</title>
      <link>http://example.org/posts/herencia-en-la-poo/</link>
      <pubDate>Fri, 31 Mar 2023 11:48:53 -0600</pubDate>
      
      <guid>http://example.org/posts/herencia-en-la-poo/</guid>
      <description>La herencia es un concepto fundamental en la programación orientada a objetos. En este post, exploraremos las ventajas y desventajas de la herencia en PHP, las diferencias entre las variables públicas, privadas y protegidas, la sobreescritura de métodos y variables en una clase hija, y los métodos y clases de tipo final.
Introducción Link to heading La herencia es uno de los conceptos fundamentales de la programación orientada a objetos. En términos simples, permite a una clase derivar características y comportamientos de otra clase existente, llamada clase base o superclase (padre).</description>
    </item>
    
    <item>
      <title>Serializar y deserializar objetos</title>
      <link>http://example.org/posts/serializar-deserialiar-objetos/</link>
      <pubDate>Fri, 31 Mar 2023 11:23:00 -0600</pubDate>
      
      <guid>http://example.org/posts/serializar-deserialiar-objetos/</guid>
      <description>Serialización es el proceso de convertir un objeto en una cadena de bytes que puede ser almacenada o transmitida a través de una red. La serialización permite que un objeto complejo se convierta en una forma que pueda ser almacenada o transmitida, y luego se pueda reconstruir en su forma original más tarde. En PHP, la serialización se realiza utilizando la función serialize(), que toma un objeto y devuelve una cadena de caracteres que representa el objeto serializado.</description>
    </item>
    
    <item>
      <title>Magic Methods de PHP</title>
      <link>http://example.org/posts/magic-methods-de-php/</link>
      <pubDate>Fri, 31 Mar 2023 10:45:34 -0600</pubDate>
      
      <guid>http://example.org/posts/magic-methods-de-php/</guid>
      <description>En PHP, existen varios métodos especiales llamados magic methods que permiten a los desarrolladores personalizar el comportamiento de las clases y objetos. Estos métodos se llaman automáticamente en ciertas situaciones específicas, como cuando se accede a una propiedad inexistente, se llama a un método inexistente, o se convierte un objeto en una cadena de texto, entre otras.
A continuación, se explicará cada uno de estos métodos especiales de PHP, junto con ejemplos que muestran cómo se pueden utilizar.</description>
    </item>
    
    <item>
      <title>Recordando conceptos de la POO</title>
      <link>http://example.org/posts/recordando-conceptos-de-la-poo/</link>
      <pubDate>Thu, 30 Mar 2023 17:24:01 -0600</pubDate>
      
      <guid>http://example.org/posts/recordando-conceptos-de-la-poo/</guid>
      <description>La programación orientada a objetos (POO) es un paradigma de programación que se centra en el uso de objetos para representar entidades del mundo real y sus interacciones. En POO, los objetos son instancias de una clase, que es una plantilla que define las propiedades y comportamientos del objeto. En este contexto, existen algunos términos importantes que se utilizan con frecuencia y que me gustaría recordar, como el constructor, destructor, static y constantes.</description>
    </item>
    
    <item>
      <title>Como ejecutar un comando en segundo plano en un servidor Ubuntu</title>
      <link>http://example.org/posts/como-ejecutar-comandos-en-segundo-plano-en-ubuntu/</link>
      <pubDate>Mon, 27 Mar 2023 17:20:00 -0600</pubDate>
      
      <guid>http://example.org/posts/como-ejecutar-comandos-en-segundo-plano-en-ubuntu/</guid>
      <description>Si deseas ejecutar un script en segundo plano en un servidor de forma que se siga ejecutando después de que te desconectes, puedes utilizar el comando nohup y redirigir la salida estándar y de error a un archivo.
Además, para asegurarte de que el proceso se siga ejecutando después de que te desconectes del servidor, puedes usar el comando disown. Esto separa el proceso del shell que lo inició y lo hace independiente de la sesión del usuario.</description>
    </item>
    
    <item>
      <title>Ventajas de la Programación Orientada a Objetos</title>
      <link>http://example.org/posts/ventajas-de-la-programacion-orientada-a-objetos/</link>
      <pubDate>Fri, 24 Mar 2023 15:31:09 -0600</pubDate>
      
      <guid>http://example.org/posts/ventajas-de-la-programacion-orientada-a-objetos/</guid>
      <description>En la actualidad la Programación Orientada a Objetos se ha vuelto una especie de estandar en la industria. En este post veremos brevemente las principales 4 razones detrás de esto:
La encapsulación Link to heading La encapsulación es uno de los cuatro conceptos fundamentales de la programación orientada a objetos (POO). Se refiere a la técnica de ocultar la complejidad interna de un objeto, permitiendo que sólo se acceda a él a través de una interfaz pública, que está formada por los métodos y propiedades que el objeto expone para su uso por parte de otros objetos.</description>
    </item>
    
  </channel>
</rss>
